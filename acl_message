ACLMessage includes:
    • The sender of the message
    • The list of receivers
    • The communicative intention (also called “performative”) indicating what the sender intends to 
achieve by sending the message.
 The performative can be REQUEST, if the sender wants the receiver
to perform an action, INFORM, if the sender wants the receiver to be aware a fact, QUERY_IF, if the
sender wants to know whether or not a given condition holds, CFP (call for proposal), PROPOSE,
ACCEPT_PROPOSAL, REJECT_PROPOSAL, if the sender and receiver are engaged in a negotiation,
and more.
    • The content i.e. the actual information included in the message (i.e. the action to be performed in a
REQUEST message, the fact that the sender wants to disclose in an INFORM message …).
    • The content language i.e. the syntax used to express the content (both the sender and the receiver must
be able to encode/parse expressions compliant to this syntax for the communication to be effective).
    • The ontology i.e. the vocabulary of the symbols used in the content and their meaning (both the sender
and the receiver must ascribe the same meaning to symbols for the communication to be effective).
    • Some fields used to control several concurrent conversations and to specify timeouts for receiving a
reply such as conversation-id, reply-with, in-reply-to, reply-by.

A message in JADE is implemented as an object of the jade.lang.acl.ACLMessage class that
provides get and set methods for handling all fields of a message. 

    EX:

ACLMessage msg = new ACLMessage(ACLMessage.INFORM);
msg.addReceiver(new AID(“Peter”, AID.ISLOCALNAME));
msg.setLanguage(“English”);
msg.setOntology(“Weather-forecast-ontology”);
msg.setContent(“Today it’s raining”);
send(msg);                                                      /////// SEND

pode se adicionar varios receivers e enviar a todos logo.

ACLMessage msg = receive();                                                   /////// RECEIVE (retorna null s n houver)


                FOR RECEIVING MESSAGEs:

public void action() {
 ACLMessage msg = myAgent.receive();
 if (msg != null) {
 // Message received. Process it
 ...
 }
 else {
 block(/*x ms*/);               ///// USAR BLOCK PARA N CONSUMIR CPU ( continues on message receive ou timeout ou com restart() )
 }
}
The above code is the typical (and strongly suggested) pattern for receiving messages inside a
behaviour. 


        PODEMOS criar um MessageTemplate para ignorar todas as messages que n matcharem o template -> receive(mt).

public void action() {
 MessageTemplate mt = MessageTemplate.MatchPerformative(ACLMessage.CFP);   <------
 ACLMessage msg = myAgent.receive(mt);
 if (msg != null) {
 // CFP Message received. Process it
 ...
 }
 else {
 block();
 }
} 


reply-with -> unique value (currentime p.ex)